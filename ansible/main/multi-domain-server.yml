# Set up a multiple domain server.
# This will create a top-level DNS router that handles SSL.
# Each domain name is expected to have a port that corresponds to a local
# docker container for its server listed in the "servers" variable.
# This script will also install docker and create a swap file.
- hosts: targets
  become: yes
  become_user: root
  vars:
    # Add domain names here.
    # When adding a new domain name, create the DNS record before running this
    # script or it will fail.
    servers:
      - servername: "grits.eha.io"
        port: 2080
      - servername: "eidr-connect.eha.io"
        port: 3080
      - servername: "eidr-connect-bsve.eha.io"
        port: 3180
      - servername: "flirt.eha.io"
        port: 4080
      - servername: "ibis.eha.io"
        port: 5080
      - servername: "wabnet.eha.io"
        port: 6080
      - servername: "geoname-curator.eha.io"
        port: 7080
    webroot: "/var/www"
    acme_tiny_challenges_directory: "/var/www/.well-known/acme-challenge"
    cert_name: "multidomain_cert_2"
    ssl_directory: "/etc/letsencrypt/live/{{cert_name}}"
  pre_tasks:
    - tags:
      - always
      block:
      - name: Initialize apache config variables
        set_fact:
          apache_vhosts_ssl_in:
            servername: "{{ item.servername }}"
            documentroot: "{{ webroot }}"
            certificate_key_file: "{{ ssl_directory }}/privkey.pem"
            certificate_file: "{{ ssl_directory }}/cert.pem"
            certificate_chain_file: "{{ ssl_directory }}/chain.pem"
            extra_parameters: |
              {% if item.servername == "eidr-connect.eha.io" %}
              TimeOut 3000
              KeepAlive Off
              {% endif %}
              RewriteEngine on
              RewriteRule ^/internal.* [F]
              RewriteCond %{HTTP:UPGRADE} ^WebSocket$ [NC]
              RewriteCond %{HTTP:CONNECTION} ^Upgrade$ [NC]
              RewriteRule ^/(?!\.well-known)(.*) ws://localhost:{{ item.port }}%{REQUEST_URI} [P]
              RewriteCond %{HTTPS} off
              RewriteRule (.*) https://%{SERVER_NAME}%{REQUEST_URI} [R,L]
              ProxyPreserveHost On
              ProxyPassMatch ^/(?!\.well-known)(.*) http://localhost:{{ item.port }}/$1
              ProxyPassReverse ^/(?!\.well-known)(.*) http://localhost:{{ item.port }}/$1
              {% if item.password is defined %}
              <LocationMatch "{{ item.passworded_location_regex }}">
                  Deny from all
                  AuthUserFile /sites/{{ item.servername }}/.htpasswd
                  AuthName "Restricted Area"
                  AuthType Basic
                  Satisfy Any
                  require valid-user
              </LocationMatch>
              {% endif %}
        with_items: "{{ servers }}"
        register: create_configs
      - name: Create site folders
        file:
          recurse: true
          path: /sites/{{ item.servername }}
          state: directory
          mode: 0755
        with_items: "{{ servers }}"
      - name: Create password files
        command: "htpasswd -cb /sites/{{ item.servername }}/.htpasswd {{ item.user }} {{ item.password }}"
        when: item.password is defined
        with_items: "{{ servers }}"
      - set_fact: apache_vhosts_ssl_in="{{ create_configs.results | map(attribute='ansible_facts.apache_vhosts_ssl_in') | list }}"
      - set_fact: letsencrypt_cert_domains_in="{{ servers | map(attribute='servername') | list }}"
  roles:
    - name: init
      tags: init
    - name: kamaln7.swapfile
      swapfile_size: 16GB
      swapfile_location: "/swapfile"
      tags: swap
    - name: angstwad.docker_ubuntu
      tags: docker
    - name: thefinn93.letsencrypt
      letsencrypt_cert_domains: "{{ letsencrypt_cert_domains_in }}"
      letsencrypt_webroot_path: "{{ webroot }}"
      letsencrypt_email: "tech@ecohealthalliance.org"
      letsencrypt_renewal_command_args: "--cert-name {{cert_name}}"
      letsencrypt_standalone_command_args: "--cert-name {{cert_name}}"
      tags: letsencrypt
    - name: geerlingguy.apache
      # The default vhost must be removed so the .well-known route from one of
      # our vhosts will be served for newly added domains that do not have one.
      # This is useful because it allows us to handle letsencrypt challenges
      # before running the apache role to create a vhost for a new domain.
      apache_remove_default_vhost: true
      apache_mods_enabled:
        - rewrite.load
        - ssl.load
        - proxy.load
        - proxy_http.load
        - alias.load
        - proxy_wstunnel.load
      apache_mods_disabled: []
      apache_vhosts_ssl: "{{ apache_vhosts_ssl_in }}"
      apache_vhosts: "{{ apache_vhosts_ssl_in }}"
      tags: apache
  tasks:
  - name: Create cleanup cron job
    cron:
      name: "Cleanup unused data"
      hour: 1
      minute: 7
      weekday: 0
      job: "docker image prune -f"
  vars_files:
    - my_secure.yml
