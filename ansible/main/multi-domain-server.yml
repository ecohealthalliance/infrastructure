# Set up a multiple domain server.
# This will create a top-level DNS router that handles SSL.
# Each domain name is expected to have a port that corresponds to a local
# docker container for its server listed in the "servers" variable.
# This script will also install docker and create a swap file.
- hosts: targets
  become: yes
  become_user: root
  vars:
    # Add domain names here.
    # When adding a new domain name, create the DNS record before running this
    # script or it will fail.
    servers:
      - servername: "eidr-connect-bsve.eha.io"
        port: 3180
      - servername: "grits.eha.io"
        port: 20443
    webroot: "/var/www"
    acme_tiny_challenges_directory: "/var/www/.well-known/acme-challenge"
    cert_name: "multidomain_cert"
    ssl_directory: "/etc/letsencrypt/live/{{cert_name}}"
  pre_tasks:
    - set_fact:
        apache_vhosts_ssl_in:
          servername: "{{ item.servername }}"
          documentroot: "{{ webroot }}"
          certificate_key_file: "{{ ssl_directory }}/privkey.pem"
          certificate_file: "{{ ssl_directory }}/cert.pem"
          certificate_chain_file: "{{ ssl_directory }}/chain.pem"
          extra_parameters: |
            RewriteEngine on
            RewriteRule ^/internal.* [F]
            RewriteCond %{HTTP:UPGRADE} ^WebSocket$ [NC]
            RewriteCond %{HTTP:CONNECTION} ^Upgrade$ [NC]
            RewriteRule ^/(?!\.well-known)(.*) ws://localhost:{{ item.port }}%{REQUEST_URI} [P]
            RewriteCond %{HTTPS} off
            RewriteRule (.*) https://%{SERVER_NAME}%{REQUEST_URI} [R,L]
            ProxyPreserveHost On
            ProxyPassMatch ^/(?!\.well-known)(.*) http://localhost:{{ item.port }}/$1
            ProxyPassReverse ^/(?!\.well-known)(.*) http://localhost:{{ item.port }}/$1
      with_items: "{{ servers }}"
      register: create_configs
      tags:
        - always
    - set_fact: apache_vhosts_ssl_in="{{ create_configs.results | map(attribute='ansible_facts.apache_vhosts_ssl_in') | list }}"
      tags:
        - always
    - set_fact: letsencrypt_cert_domains_in="{{ servers | map(attribute='servername') | list }}"
      tags:
        - always
    - debug: var=apache_vhosts_ssl_in
    - debug: var=letsencrypt_cert_domains_in
    - debug: var=letsencrypt_cert_domains_in
      tags:
        - always
  roles:
    - name: init
      tags: init
    - name: kamaln7.swapfile
      swapfile_size: 16GB
      swapfile_location: "/swapfile"
      tags: swap
    - name: angstwad.docker_ubuntu
      tags: docker
    - name: thefinn93.letsencrypt
      letsencrypt_cert_domains: "{{ letsencrypt_cert_domains_in }}"
      letsencrypt_webroot_path: "{{ webroot }}"
      letsencrypt_email: "tech@ecohealthalliance.org"
      letsencrypt_renewal_command_args: "--cert-name {{cert_name}}"
      letsencrypt_standalone_command_args: "--cert-name {{cert_name}}"
      tags: letsencrypt
    - name: geerlingguy.apache
      apache_mods_enabled:
        - rewrite.load
        - ssl.load
        - proxy.load
        - proxy_http.load
        - alias.load
        - proxy_wstunnel.load
      apache_mods_disabled: []
      apache_vhosts_ssl: "{{ apache_vhosts_ssl_in }}"
      apache_vhosts: "{{ apache_vhosts_ssl_in }}"
      tags: apache
  vars_files:
    - my_secure.yml
